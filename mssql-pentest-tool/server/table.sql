-- -- Create Users table
-- CREATE TABLE Users (
--   id INT PRIMARY KEY IDENTITY(1,1),
--   username VARCHAR(255) NOT NULL UNIQUE,
--   password_hash VARCHAR(255) NOT NULL,
--   role VARCHAR(50) NOT NULL,
--   created_at DATETIME DEFAULT GETDATE() -- Use DATETIME and set default to current time
-- );

-- -- Create ScanHistory table
-- CREATE TABLE ScanHistory (
--   id INT PRIMARY KEY IDENTITY(1,1),
--   scan_type VARCHAR(50) NOT NULL,
--   target VARCHAR(255) NOT NULL,
--   status VARCHAR(50) NOT NULL,
--   result TEXT,
--   created_at DATETIME DEFAULT GETDATE(), -- Use DATETIME and set default to current time
--   updated_at DATETIME DEFAULT GETDATE() -- Use DATETIME and set default to current time
-- );

-- -- Create Reports table
-- CREATE TABLE Reports (
--   id INT PRIMARY KEY IDENTITY(1,1),
--   scan_id INT NOT NULL,
--   report_name VARCHAR(255) NOT NULL,
--   report_data VARBINARY(MAX), -- Use VARBINARY(MAX) for binary data
--   created_at DATETIME DEFAULT GETDATE(), -- Use DATETIME and set default to current time
--   FOREIGN KEY (scan_id) REFERENCES ScanHistory(id)
-- );

-- -- Create SQLInjectionTests table
-- CREATE TABLE SQLInjectionTests (
--   id INT PRIMARY KEY IDENTITY(1,1),
--   scan_id INT NOT NULL,
--   target VARCHAR(255) NOT NULL,
--   credentials VARCHAR(255),
--   result TEXT,
--   created_at DATETIME DEFAULT GETDATE(), -- Use DATETIME and set default to current time
--   FOREIGN KEY (scan_id) REFERENCES ScanHistory(id)
-- );

-- -- Create BruteForceTests table
-- CREATE TABLE BruteForceTests (
--   id INT PRIMARY KEY IDENTITY(1,1),
--   scan_id INT NOT NULL,
--   target VARCHAR(255) NOT NULL,
--   credentials VARCHAR(255),
--   wordlist TEXT, -- List of words attempted during brute force
--   result TEXT,
--   created_at DATETIME DEFAULT GETDATE(), -- Use DATETIME and set default to current time
--   FOREIGN KEY (scan_id) REFERENCES ScanHistory(id)
-- );
-- Drop the existing Users table
-- Recreate the Users table
-- CREATE TABLE Users (
--   id INT PRIMARY KEY IDENTITY(1,1),
--   username VARCHAR(255) NOT NULL UNIQUE,
--   password_hash VARCHAR(255) NOT NULL,
--   role VARCHAR(50) NOT NULL,
--   created_at DATETIME DEFAULT GETDATE() -- Use DATETIME and set default to current time
-- );
-- INSERT INTO Users (username, password_hash, role)
-- VALUES ('abdulahad', '123', 'admin');
-- IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='ServerPermissions' AND xtype='U')
-- BEGIN
--   CREATE TABLE ServerPermissions (
--       class_desc NVARCHAR(60),
--       permission_name NVARCHAR(100),
--       state_desc NVARCHAR(60),
--       grantor_name NVARCHAR(255),
--       grantee_name NVARCHAR(255)
--   );
-- END
-- Check if the table exists, and if not, create it
-- IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='ServerPermissions' AND xtype='U')
-- BEGIN
--   CREATE TABLE ServerPermissions (
--       class_desc NVARCHAR(60),
--       permission_name NVARCHAR(100),
--       state_desc NVARCHAR(60),
--       grantor_name NVARCHAR(255),
--       grantee_name NVARCHAR(255)
--   );
-- END

-- -- Insert sample values into the ServerPermissions table
-- INSERT INTO ServerPermissions (class_desc, permission_name, state_desc, grantor_name, grantee_name)
-- VALUES
--   ('CLASS1', 'SELECT', 'GRANT', 'Admin', 'User1'),
--   ('CLASS2', 'INSERT', 'DENY', 'Admin', 'User2'),
--   ('CLASS3', 'UPDATE', 'GRANT', 'Admin', 'User3'),
--   ('CLASS4', 'DELETE', 'DENY', 'Admin', 'User4');
-- First create a test user directly in DB
DECLARE @salt NVARCHAR(128) = NEWID();
DECLARE @password NVARCHAR(100) = 'test123';
DECLARE @hash VARBINARY(64) = HASHBYTES('SHA2_256', @password + @salt);

INSERT INTO Users (username, password_hash, salt) 
VALUES ('testuser', @hash, @salt);