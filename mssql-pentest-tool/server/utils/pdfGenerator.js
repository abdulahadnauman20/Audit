const PDFDocument = require('pdfkit');
const fs = require('fs');

/**
 * Generates a PDF report for penetration testing results
 * @param {Object} reportData - The penetration testing results
 * @param {string} outputPath - Where to save the PDF
 * @returns {Promise<string>} - Path to the generated PDF
 */
async function generatePDF(reportData, outputPath = './reports/report.pdf') {
  return new Promise((resolve, reject) => {
    try {
      // Create directory if it doesn't exist
      if (!fs.existsSync('./reports')) {
        fs.mkdirSync('./reports');
      }

      const doc = new PDFDocument();
      const stream = fs.createWriteStream(outputPath);
      
      doc.pipe(stream);

      // Add report header
      doc.fontSize(20)
         .text('MSSQL Penetration Testing Report', { align: 'center' })
         .moveDown(0.5);

      doc.fontSize(12)
         .text(`Generated on: ${new Date().toLocaleString()}`)
         .moveDown(1);

      // Add summary section
      doc.fontSize(16)
         .text('Executive Summary', { underline: true })
         .moveDown(0.5);

      doc.fontSize(12)
         .text(reportData.summary || 'No summary provided')
         .moveDown(1);

      // Add vulnerability details
      doc.fontSize(16)
         .text('Vulnerability Details', { underline: true })
         .moveDown(0.5);

      reportData.vulnerabilities.forEach(vuln => {
        doc.fontSize(14)
           .text(`${vuln.type} (Severity: ${vuln.severity})`)
           .moveDown(0.2);

        doc.fontSize(12)
           .text(`Description: ${vuln.description}`)
           .moveDown(0.2);

        doc.text(`Affected Resource: ${vuln.resource}`)
           .moveDown(0.2);

        doc.text(`Payload Used: ${vuln.payload || 'N/A'}`)
           .moveDown(0.2);

        doc.text(`Recommendation: ${vuln.recommendation}`)
           .moveDown(1);
      });

      // Add footer
      doc.fontSize(10)
         .text('Confidential - For authorized personnel only', { align: 'center' });

      doc.end();

      stream.on('finish', () => resolve(outputPath));
      stream.on('error', reject);
    } catch (err) {
      reject(err);
    }
  });
}

module.exports = { generatePDF };