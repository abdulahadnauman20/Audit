// server/routes/sqlInjection.js
const express = require('express');
const router = express.Router();
const mssql = require('mssql');
const { logger } = require('../server')
router.post('/sqlinjection/test', async (req, res) => {
  const { target, username, password } = req.body;
  
  try {
    // Test for SQL injection vulnerabilities
    const config = {
      user: username,
      password: password,
      server: target,
      options: {
        encrypt: true,
        trustServerCertificate: true,
      }
    };

    // Test with a basic injection payload
    const injectionTests = [
      { name: "Basic SQL Injection", payload: "' OR '1'='1" },
      { name: "Union-Based Injection", payload: "' UNION SELECT null, username, password FROM users--" },
      { name: "Time-Based Blind Injection", payload: "'; WAITFOR DELAY '0:0:5'--" }
    ];

    const results = [];
    
    for (const test of injectionTests) {
      try {
        const pool = await mssql.connect(config);
        const request = pool.request();
        
        // Simulate a vulnerable query
        const query = `SELECT * FROM users WHERE username = '${test.payload}' AND password = '${test.payload}'`;
        
        const startTime = Date.now();
        await request.query(query);
        const endTime = Date.now();
        
        const responseTime = endTime - startTime;
        
        results.push({
          test: test.name,
          payload: test.payload,
          vulnerable: true,
          responseTime: responseTime > 5000 ? 'Delayed response detected' : 'Normal response'
        });
        
        await pool.close();
      } catch (err) {
        if (err.message.includes('Incorrect syntax')) {
          results.push({
            test: test.name,
            payload: test.payload,
            vulnerable: false,
            message: 'Syntax error - possible protection'
          });
        } else {
          results.push({
            test: test.name,
            payload: test.payload,
            vulnerable: false,
            message: 'Error occurred'
          });
        }
      }
    }
    
    res.json({ success: true, results });
  } catch (err) {
    logger.error(`SQL Injection test failed: ${err}`);
    res.status(500).json({ success: false, error: err.message });
  }
});

module.exports = router;