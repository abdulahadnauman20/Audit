// server/routes/bruteForce.js
const express = require('express');
const router = express.Router();
const mssql = require('mssql');
const { logger } = require('../server');
const { RateLimiterMemory } = require('rate-limiter-flexible');

// Rate limiting to prevent actual brute force attacks
const rateLimiter = new RateLimiterMemory({
  points: 5, // 5 attempts
  duration: 60, // per 60 seconds
});

router.post('/test', async (req, res) => {
  try {
    await rateLimiter.consume(req.ip);
    
    const { target, username, wordlist } = req.body;
    
    if (!wordlist || wordlist.length === 0) {
      return res.status(400).json({ success: false, error: 'Wordlist is required' });
    }
    
    const results = [];
    let success = false;
    
    for (const password of wordlist) {
      try {
        const config = {
          user: username,
          password: password,
          server: target,
          options: {
            encrypt: true,
            trustServerCertificate: true,
          }
        };
        
        const pool = await mssql.connect(config);
        await pool.request().query('SELECT 1');
        await pool.close();
        
        // If we get here, the password worked
        results.push({ password, success: true });
        success = true;
        break;
      } catch (err) {
        results.push({ password, success: false, error: err.message });
      }
    }
    
    res.json({ success, results });
  } catch (rlRejected) {
    if (rlRejected instanceof Error) {
      logger.error(`Brute force test error: ${rlRejected}`);
      return res.status(500).json({ success: false, error: rlRejected.message });
    } else {
      logger.warn(`Rate limit exceeded for IP: ${req.ip}`);
      return res.status(429).json({
        success: false,
        error: 'Too many requests. Please try again later.'
      });
    }
  }
});

module.exports = router;